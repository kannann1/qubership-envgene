---
- name: Ensure AppDefs and RegDefs folders exist
  ansible.builtin.file:
    path: "{{ current_env_dir }}/{{ item }}"
    state: directory
  loop:
    - AppDefs
    - RegDefs

# -------- Load appregdef_config --------
- name: Determine appregdef config path
  ansible.builtin.set_fact:
    appregdef_config_path: >-
      {{
        (env_instances_dir + '/environments/' + cluster_name + '/configuration/appregdef_config.yaml')
        if lookup('file', env_instances_dir + '/environments/' + cluster_name + '/configuration/appregdef_config.yaml', errors='ignore') != ''
        else (
          (env_instances_dir + '/environments/' + cluster_name + '/configuration/appregdef_config.yml')
          if lookup('file', env_instances_dir + '/environments/' + cluster_name + '/configuration/appregdef_config.yml', errors='ignore') != ''
          else (
            (env_instances_dir + '/configuration/appregdef_config.yaml')
            if lookup('file', env_instances_dir + '/configuration/appregdef_config.yaml', errors='ignore') != ''
            else (env_instances_dir + '/configuration/appregdef_config.yml')
          )
        )
      }}

- name: Load appregdef config if exists
  ansible.builtin.set_fact:
    appregdef_config: "{{ lookup('file', appregdef_config_path) | from_yaml }}"
  ignore_errors: true

- name: Set default overrides
  ansible.builtin.set_fact:
    appdefs_overrides: "{{ appregdef_config.appdefs.overrides | default({}) }}"
    regdefs_overrides: "{{ appregdef_config.regdefs.overrides | default({}) }}"

- name: Debug - Show loaded overrides
  ansible.builtin.debug:
    msg:
      - "AppDefs Overrides: {{ appdefs_overrides }}"
      - "RegDefs Overrides: {{ regdefs_overrides }}"

# ------------------------------------
# -------- Render AppDefs --------
- name: Find AppDef templates
  ansible.builtin.find:
    paths: "{{ templates_dir }}/appdefs"
    patterns: ["*.yaml.j2", "*.yml.j2", "*.j2"]
    use_regex: false
  register: appdef_templates
  ignore_errors: true

- name: Render and save AppDefs
  when: appdef_templates.files is defined and (appdef_templates.files | length) > 0
  block:
    - name: Debug - Found AppDef templates
      ansible.builtin.debug:
        msg: "Total AppDef templates found: {{ appdef_templates.files | length }}"

    - name: Render AppDefs
      block:
        - name: Render AppDef to temp
          ansible.builtin.template:
            src: "{{ item.path }}"
            dest: "/tmp/{{ item.path | basename | regex_replace('\\.j2$', '') }}.rendered.appdef.yml"
          vars:
            appdefs:
              overrides: "{{ appdefs_overrides }}"

        - name: Read AppDef name
          ansible.builtin.set_fact:
            appdef_rendered_path: "/tmp/{{ item.path | basename | regex_replace('\\.j2$', '') }}.rendered.appdef.yml"
            appdef_name: "{{ lookup('file', appdef_rendered_path) | from_yaml | json_query('name') }}"

        - name: Debug - AppDef Name
          ansible.builtin.debug:
            msg: "AppDef rendered: {{ appdef_name }}"

        - name: Save rendered AppDef
          ansible.builtin.copy:
            src: "{{ appdef_rendered_path }}"
            dest: "{{ current_env_dir }}/AppDefs/{{ appdef_name }}.yml"
            remote_src: true
      loop: "{{ appdef_templates.files }}"
      loop_control:
        label: "{{ item.path | basename }}"

# ------------------------------------
# -------- Render RegDefs --------
- name: Find RegDef templates
  ansible.builtin.find:
    paths: "{{ templates_dir }}/regdefs"
    patterns: ["*.yaml.j2", "*.yml.j2", "*.j2"]
    use_regex: false
  register: regdef_templates
  ignore_errors: true

- name: Render and save RegDefs
  when: regdef_templates.files is defined and (regdef_templates.files | length) > 0
  block:
    - name: Debug - Found RegDef templates
      ansible.builtin.debug:
        msg: "Total RegDef templates found: {{ regdef_templates.files | length }}"

    - name: Render RegDefs
      block:
        - name: Render RegDef to temp
          ansible.builtin.template:
            src: "{{ item.path }}"
            dest: "/tmp/{{ item.path | basename | regex_replace('\\.j2$', '') }}.rendered.regdef.yml"
          vars:
            regdefs:
              overrides: "{{ regdefs_overrides }}"

        - name: Read RegDef name
          ansible.builtin.set_fact:
            regdef_rendered_path: "/tmp/{{ item.path | basename | regex_replace('\\.j2$', '') }}.rendered.regdef.yml"
            regdef_name: "{{ lookup('file', regdef_rendered_path) | from_yaml | json_query('name') }}"

        - name: Debug - RegDef Name
          ansible.builtin.debug:
            msg: "RegDef rendered: {{ regdef_name }}"

        - name: Save rendered RegDef
          ansible.builtin.copy:
            src: "{{ regdef_rendered_path }}"
            dest: "{{ current_env_dir }}/RegDefs/{{ regdef_name }}.yml"
            remote_src: true
      loop: "{{ regdef_templates.files }}"
      loop_control:
        label: "{{ item.path | basename }}"
