---
- name: Validate mandatory variables
  assert:
    that:
      - current_env_dir is defined
      - cluster_name is defined
      - env_instances_dir is defined
      - (appdef_templates.files | length) >= 0
      - (regdef_templates.files | length) >= 0

- name: Ensure AppDefs directory exists
  file:
    path: "{{ current_env_dir }}/AppDefs"
    state: directory
    mode: '0755'
  when: appdef_templates.files | length > 0

- name: Ensure RegDefs directory exists
  file:
    path: "{{ current_env_dir }}/RegDefs"
    state: directory
    mode: '0755'
  when: regdef_templates.files | length > 0

- name: Set config file candidates
  set_fact:
    cluster_config_yaml: "{{ output_dir }}/{{ cluster_name }}/configuration/appregdef_config.yaml"
    cluster_config_yml:  "{{ output_dir }}/{{ cluster_name }}/configuration/appregdef_config.yml"
    global_config_yaml:  "{{ output_dir | dirname }}/configuration/appregdef_config.yaml"
    global_config_yml:   "{{ output_dir | dirname }}/configuration/appregdef_config.yml"

- name: Stat potential config files
  stat:
    path: "{{ item }}"
  loop:
    - "{{ cluster_config_yaml }}"
    - "{{ cluster_config_yml }}"
    - "{{ global_config_yaml }}"
    - "{{ global_config_yml }}"
  loop_control:
    label: "{{ item | basename }}"
  register: config_stats

- name: Pick config path by existence
  set_fact:
    appregdef_config_path: >-
      {{ (
          config_stats.results[0].stat.exists and cluster_config_yaml
        ) or (
          config_stats.results[1].stat.exists and cluster_config_yml
        ) or (
          config_stats.results[2].stat.exists and global_config_yaml
        ) or (
          config_stats.results[3].stat.exists and global_config_yml
        ) or 'none'
      }}

- name: Load overrides config (if any)
  set_fact:
    appregdef_config: "{{ lookup('file', appregdef_config_path) | from_yaml }}"
  when: appregdef_config_path != 'none'
  ignore_errors: yes

- name: Default to empty config
  set_fact:
    appregdef_config: {}
  when: appregdef_config is not defined

- name: Extract override mappings
  set_fact:
    appdefs_overrides: "{{ appregdef_config.appdefs.overrides | default({}) }}"
    regdefs_overrides: "{{ appregdef_config.regdefs.overrides | default({}) }}"

- name: Prepare regdefs dict for Jinja context
  set_fact:
    regdefs:
      overrides: "{{ regdefs_overrides }}"

- name: Timestamp for unique filenames
  set_fact:
    render_timestamp: "{{ lookup('pipe', 'date +%s') }}"

- name: Render all AppDefs
  include_tasks: render_single_appdef.yaml
  loop: "{{ appdef_templates.files }}"
  loop_control:
    label: "{{ item.path | basename }}"
  vars:
    appdef_item: "{{ item }}"
  when: appdef_templates.files | length > 0

- name: Render all RegDefs
  include_tasks: render_single_regdef.yaml
  loop: "{{ regdef_templates.files }}"
  loop_control:
    label: "{{ item.path | basename }}"
  vars:
    regdef_item: "{{ item }}"
  when: regdef_templates.files | length > 0
